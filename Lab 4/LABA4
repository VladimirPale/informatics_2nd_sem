#include <iostream>
#include <math.h>
#include <iostream>
#include <string>
#include <random>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <vector>
#include <cmath>
#include <algorithm>
#include <limits>
#define refueling_time 0.008
#define reWheel_time 0.005
#define dt 0.00027778
using namespace std;
void getInput(int *input) {
    string inputString;
    getline(cin, inputString);
    istringstream iss(inputString);

    if (iss >> *input && *input > 0) {
        return;
    } else {
        cout << "Error input (you input a character or a non-positive number. TRY AGAIN)!" << "\t";
        getInput(input);
    }
}

void getInput(double *input) {
    string inputString;
    getline(cin, inputString);
    istringstream iss(inputString);

    if (iss >> *input && *input > 0) {
        return;
    } else {
        cout << "Error input (you input a character or a non-positive number. TRY AGAIN)!" << "\t";
        getInput(input);
    }
}

class WHEELS{
public:
    double mileage_wheel;
    int status;
    double get_status()  {return status;}
    void set_status(int status) {this->status = status;}


    void status_wheel(double mileage){
    if(status!=1){
        double s =rand() %900+ mileage*(rand()%100)*0.002-mileage*(rand()%100)*0.002;
        if (s>1000) {
            status = 1;
        }
    }
    }
};


class FUEL_SYSTEM{
protected:
    double volume;
    double current_volume;
    int amount_refuelings=0;
public:
 FUEL_SYSTEM() {volume = 0;current_volume=0;};
 void calc_current_volume(double engine_consumption,double mileage)
{
  current_volume=volume-((engine_consumption/100)*mileage);
}
    double get_volume() {return volume;}
};

class ENGINE{
protected:
    double power ;
    double fuel_consumption;
public:
    ENGINE() {power = 0;fuel_consumption=0;};

    double Get_power() const {return power;}
    double Get_fuel_consumption() const {return fuel_consumption;}

    double calculating_fuel_consumption(double power)
    {
       return fabs(pow((power), 0.5) / pow((double)1.5, (double)(power / 1000)));
    }
};


class CARS: public ENGINE, public FUEL_SYSTEM {
private:
string name_of_car;
double mileage;
int amount_wheels;
double current_speed;
double start_speed;
bool speed_s;
double time_of_race;
int current_laps;/////
double current_mileage;////
int num_refuelings=0;
public:
int brokenwheels;
WHEELS* wheels;

public:
int stat_of_car;
vector<WHEELS> vec_wheels;
double diftime=0;
string get_carname(){return name_of_car;}
void determination_speed() {
  double s = 0.0;
  if ((amount_wheels - brokenwheels) == 0) {
    s = 1.0 / amount_wheels;
  }
    current_speed = fabs((((double)(power) - ((double)(power) / 2.0)) * 20.0) / pow(amount_wheels, 2.0)) * (((amount_wheels - brokenwheels) + s) / amount_wheels);
}
void mileage_plus(){this->mileage+=current_speed*dt;}
void current_mileage_plus(){this->current_mileage+=(current_speed*dt);}
double get_current_mileage(){return current_mileage;};
double get_consumption(){return calculating_fuel_consumption(power);}
double get_mileage(){return mileage;}
double set_mileage(double mileage){this->mileage=mileage;}
double get_current_mil(){return current_mileage;}
double get_speed(){return current_speed;}
void set_time_of_race(double time){this->time_of_race=time;}
int get_broken_wheels(){return brokenwheels;}
int get_current_laps(){return current_laps;}
void plus_current_laps(){this->current_laps++;}
double get_current_volume(){return current_volume;}
void set_current_laps(int current_laps){this->current_laps=current_laps;}
double get_time(){return time_of_race;}
double get_amount_refuelings(){return num_refuelings;}
double get_amount_wheels(){return amount_wheels;}
void output_time()
{

  double t = this->time_of_race;
  double hours = (floor)(t);
  double cur_time = (t - hours) * 60;
  double minutes = (floor)(cur_time);
  double seconds = (floor)((cur_time - minutes) * 60);
        if ((hours==0)&&(minutes==0)){ cout << "TIME OF THE RACE: "<< seconds << " sec\n";}
        else if (hours==0){ cout << "TIME OF THE RACE:" << minutes << " min "<<seconds << " sec\n";}
        else{cout << "TIME OF THE RACE: " << hours << " hours " << minutes << " min " << seconds << " sec\n";}
}
void calc_broken_wheels()
{
  int c = 0;
  for (int i = 0; i < amount_wheels; i++)
  {
    if (vec_wheels[i].get_status() == 1) {
      c++;
    }
  }
  brokenwheels=c;
}
void total_time()
{
  time_of_race+=diftime;
}
int lap_check(double lenght_lap)
{
  if (current_mileage-lenght_lap>=0)
  {
    current_laps=int(mileage/lenght_lap);
    current_mileage=0;
    return 1;
  }
  else {return 0;}
}
void check_refuel(double lenght_lap)
{
  if (current_volume <= (fuel_consumption * (lenght_lap/100)))
  {
    num_refuelings++;
    diftime+=refueling_time;
    current_volume=volume;
  }
}
void check_change_wheels()
{
  {
    if((brokenwheels!=0)&&(brokenwheels<amount_wheels))
    {
      diftime+=reWheel_time*brokenwheels;
      for(int i=0;i<vec_wheels.size();++i)
        {
            vec_wheels[i].set_status(0.0);
        }
    }
  }
}
CARS(){
    cout<<"Created\n";
}
  friend istream& operator >> (istream& stream, CARS& vehicle)
    {
        cout << "Enter the name of the car: \n";
         getline(stream, vehicle.name_of_car);
        cout<<"Enter the number of wheels: \n";
        getInput(&vehicle.amount_wheels);

        for (int i = 0; i < vehicle.amount_wheels; i++) {
            WHEELS wheell;
            vehicle.vec_wheels.push_back(wheell);
        }
        cout<<"Enter the tank volume: \n";
        getInput(&vehicle.volume);
        cout<<"Enter the power: \n";
        getInput(&vehicle.power);

        vehicle.current_mileage = 0;
        vehicle.current_laps = 0;
        vehicle.mileage = 0;
        vehicle.stat_of_car = 0;
        vehicle.current_volume = vehicle.volume;
        vehicle.fuel_consumption = vehicle.calculating_fuel_consumption(vehicle.power);
        vehicle.determination_speed();
        return stream;
    }
 friend ostream &operator << (ostream &stream,CARS& vehicle)
{
  stream<<"\nName of the car: "<<vehicle.name_of_car<<endl;
  stream<<"Amount of wheels: "<<vehicle.amount_wheels<<endl;
  stream<<"Broken wheels: "<<vehicle.brokenwheels<<endl;
  stream<<"Speed: "<<vehicle.current_speed<<endl;
  stream<<"Volume tank: "<<vehicle.volume<<endl;
  stream<<"Current volume: "<<vehicle.current_volume<<endl;
  stream<<"Engine power: "<<vehicle.power<<endl;
  stream<<"Engine consumption: "<<vehicle.fuel_consumption<<endl;
  stream<<"Mileage: "<<vehicle.mileage<<endl;
  return stream;
}

};
int end_race(vector<CARS> &vehicles,int amount_laps,double lenght_lap)
{
    int finished_cars;
    for (int i=0;i<vehicles.size();i++)
      {
        if (vehicles[i].get_current_mil()>=amount_laps*lenght_lap)
        {
          finished_cars++;
        }
      }
    if ( finished_cars==vehicles.size())
    {
      return 1;
    }
    else return 0;
  }
  vector<CARS>  RatingResults(vector<CARS> car) {
    sort(car.begin(), car.end(), []( CARS& a,  CARS& b) {
    if (a.get_time() != b.get_time()) {
      return a.get_time() < b.get_time();
    }
    else {
      return a.get_amount_refuelings() < b.get_amount_refuelings();
    }
  });
  return car;
}
   void outputResults(vector<CARS> v) {
  vector<CARS> results = RatingResults(v);
  for (int i = 0; i < results.size(); i++) {
    cout << results[i].get_carname() << endl;
    results[i].output_time();
    cout<<"Laps: "<<results[i].get_current_laps()<<endl;
    cout << "Amount refuelings: " << int(results[i].get_amount_refuelings()) << endl;
  }
}

void new_page()
{
  for(int i=0;i<100;++i)
    {
      cout<<"\n";
    }
}

void menu()
{
 vector<CARS> vehicles;
  int choice;
  int exit_menu=0;
  double amount_laps=0;
  double lenght_lap=0;
  int carcheck=0;
  int finished_cars=0;
  while(exit_menu==0)
    {
      cout<<"1.Input new vehicle"<<"\n";
      cout<<"2.Check information about vehicles"<<"\n";
      cout<<"3.Enter lenght of the track"<<"\n";;
      cout<<"4.Determine the race"<<"\n";
      cout<<"5.Results:"<<"\n";
      cout<<"6.Exit"<<"\n";
      try{
            cin.clear();
      getInput(&choice);
        if ((choice > 6) || (choice < 1)) {
          throw "Error, try another number!";
          }
        }
        catch (const char* error_message)
        {
          cerr << "exception thrown: " << error_message << endl;
          cout<<"Enter number(1-6) ";
            cin.clear();
          getInput(&choice);
        }

  switch(choice)
    {
      case 1: {
      new_page();
      CARS newcar;
      cin>> newcar;
      vehicles.push_back(newcar);
      new_page();
        carcheck++;
        break;
    }
      case 2: {
        new_page();
        if(carcheck==0)
          {
            cout<<"No vehicles"<<endl;
            break;
          }
        for(int i=0;i<vehicles.size();++i)
          {
            cout<<vehicles[i];
          }
        break;
        }
      case 3: {
        new_page();
        if(carcheck==0)
          {
            cout<<"No vehicles"<<endl;
            break;
          }
            cout<<"Enter number of laps: ";
            getInput(&amount_laps);
            amount_laps=(floor)(amount_laps);
          cout << "Enter the length of the track: ";
          getInput(&lenght_lap);
          break;
        }
      case 4: {
        for (int i = 0; i < vehicles.size(); i++) {
                vehicles[i].stat_of_car = 0;
                vehicles[i].check_refuel(lenght_lap);
                for(int j = 0; j<vehicles[i].get_amount_wheels();j++){vehicles[i].vec_wheels[j].set_status(0.0);}
                vehicles[i].set_mileage(0.);
        }
        new_page();
        if(carcheck==0)
        {
          cout<<"No vehicles"<<endl;
          break;
        }
        if(amount_laps==0)
        {
          cout<<"No laps"<<endl;
          break;
        }
        double current_time=0;
        int racing_cars=vehicles.size();
        while(!end_race(vehicles,amount_laps,lenght_lap))
          {
            if(racing_cars<=0)
              {
                break;
              }
            for(int i=0;i<vehicles.size();++i)
              {
                int exit=0;
                if (vehicles[i].stat_of_car==0)
                {
                  vehicles[i].mileage_plus();
                  vehicles[i].current_mileage_plus();
                  for (int j = 0; j < vehicles[i].vec_wheels.size(); j++)
                  {
                        vehicles[i].vec_wheels[j].status_wheel(vehicles[i].get_mileage());
                  }
                  vehicles[i].calc_broken_wheels();
                  vehicles[i].calc_current_volume(vehicles[i].get_consumption(),vehicles[i].get_current_mil());
                  vehicles[i].determination_speed();
                  vehicles[i].set_time_of_race(current_time);
                  vehicles[i].output_time();
                  cout<<"Vehicle: "<<vehicles[i].get_carname()
                    <<" Lap: "<<vehicles[i].get_current_laps()+1<<endl
                    <<" Current Speed: "<<vehicles[i].get_speed()<<"\n"
                    <<" Current fuel "<<vehicles[i].get_current_volume()
                    <<" Broken wheels: "<<vehicles[i].get_broken_wheels()<<"\n"
                    <<" Mileage: "<<vehicles[i].get_mileage()<<"\n";
                  if (vehicles[i].get_broken_wheels()==vehicles[i].vec_wheels.size() || (vehicles[i].get_current_volume()<=0))
                    {
                        exit=1;
                        vehicles[i].set_time_of_race(current_time);
                        vehicles[i].plus_current_laps();
                    }
                  if ((lenght_lap*amount_laps)-(vehicles[i].get_mileage())<=0)
                    {
                      exit=1;
                      vehicles[i].set_time_of_race(current_time);
                      vehicles[i].set_current_laps(amount_laps);
                      vehicles[i].output_time();
                      cout<<vehicles[i].get_carname()<<" FINISHED"<<endl;
                    }
                  if (exit==1)
                    {
                      vehicles[i].stat_of_car=1;
                      racing_cars=racing_cars-1;
                      break;
                    }
                  if (vehicles[i].lap_check(lenght_lap)==1)
                    {
                      vehicles[i].check_refuel(lenght_lap);
                      vehicles[i].check_change_wheels();
                    }
                }
                else {
                  continue;
                }
              }
            current_time+=dt;
          }
        for(int i=0;i<vehicles.size();++i)
          {
            vehicles[i].total_time();
          }
        break;
      }
      case 5:{
      new_page();
      outputResults(vehicles);
      break;
      }
      case 6:{
        new_page();
        cout<<"Are you sure to exit? 1-yes 0-no\n";
        cin>>exit_menu;
        if(exit_menu==1)
        {
          vehicles.clear();
          return;
        }
        break;
      }
      }
    }
  }


int main() {
  srand(time(NULL));
  menu();
  return 0;
}
