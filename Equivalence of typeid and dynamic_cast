/*#include <iostream>
#include <typeinfo>


using namespace std;
class Base {
public:
    virtual ~Base() {}
};

class Derived : public Base {
public:
    void derivedMethod() {
        cout << "Метод производного класа" << std::endl;
    }
};
class AnotherClass {};
int main() {
    setlocale(LC_ALL, "Russian");
    Base* basePtr = new Derived();
    //Base* basePtr = new Base();
    AnotherClass* anotherPtr = new AnotherClass();


    if (typeid(*basePtr) == typeid(Derived)) {
        cout << "Успешно приведен к производному классу" << endl;
        Derived* derivedPtr = (Derived*)(basePtr);
        derivedPtr->derivedMethod();
    } else {
        cout << "Не удалось выполнить приведение к производному классу" << endl;
    }

    ///////////////////////////////////////////////////////////
    Base* anotherBasePtr = new Base();
    if (typeid(*anotherBasePtr) == typeid(AnotherClass)) {     //AnotherClass не является производным от Base
        AnotherClass* anotherDerivedPtr = (AnotherClass*)(anotherBasePtr);
        cout<<"AnotherClass приведен";
    } else {
        cout << "Приведение к невозможному типу" << endl;
    }

    ///////////////////////////////////////////////////////
    if (typeid(*basePtr) == typeid(AnotherClass)) {
        AnotherClass* anotherDerivedPtr = (AnotherClass*)(basePtr);
    } else {
        cout << "Приведение к невозможному типу" << endl;
    }

    delete basePtr;
    delete anotherPtr;

    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
    virtual ~Base() {}
};

class Derived : public Base {
public:
    void derivedMethod() {
        cout << "Метод производного класса" << endl;
    }
};

class AnotherClass {};

int main() {
    setlocale(LC_ALL, "Russian");

    Base* basePtr = new Derived();
    AnotherClass* anotherPtr = new AnotherClass();

    Derived* derivedPtr = dynamic_cast<Derived*>(basePtr);
    if (derivedPtr) {
        cout << "Успешно приведен к производному классу" << endl;
        derivedPtr->derivedMethod();
    } else {
        cout << "Не удалось выполнить приведение к производному классу" << endl;
    }


    AnotherClass* anotherDerivedPtr = dynamic_cast<AnotherClass*>(basePtr);
    if (anotherDerivedPtr) {
        cout << "Успешно приведен к классу AnotherClass" << endl;
    } else {
        cout << "Приведение к невозможному типу" << endl;
    }

    delete basePtr;
    delete anotherPtr;

    return 0;

}*/

////////////////////////////////////////


/*#include <iostream>
#include <typeinfo>
using namespace std;
class Base {
public:
    virtual ~Base() {}
};

class Derived : public Base {
public:

};

int main() {
    setlocale(LC_ALL, "Russian");
    //Base* basePtr = new Derived();
    Base* basePtr = new Base();

    if (typeid(*basePtr) == typeid(Derived)) {
        cout << "basePtr указывает на объект класса Derived" << endl;
    } else {
        cout << "basePtr указывает на объект класса Base" <<endl;
    }

    if (typeid(basePtr) == typeid(Base*)) {
        cout << "basePtr класса Base" << endl;
    } else if (typeid(basePtr) == typeid(Derived*)) {
        cout << "basePtr класса Derived" << endl;
    }

    delete basePtr;

    return 0;
}*/



/*#include <iostream>
#include <typeinfo>

using namespace std;

class Base {
public:
    virtual ~Base() {}
};

class Derived : public Base {
public:

};

int main() {
    setlocale(LC_ALL, "Russian");
    Base* basePtr = new Derived();
    //Base* basePtr = new Base();

    if (dynamic_cast<Derived*>(basePtr) != nullptr) {
        cout << "basePtr указывает на объект класса Derived" << endl;
    } else {
        cout << "basePtr указывает на объект класса Base" << endl;
    }

    if (dynamic_cast<Base*>(basePtr) != nullptr) {
        cout << "basePtr класса Base" << endl;
    } else if (dynamic_cast<Derived*>(basePtr) != nullptr) {
        cout << "basePtr класса Derived" << endl;
    }

    delete basePtr;

    return 0;
}*/










