#include <iostream>
#include <math.h>
#include <iostream>
#include <string>
#include <sstream>
using namespace std;
struct polygon
{
  double modul_side;
  int amount_angles;
  double P;
  double S;
  double x1;
  double y1;
};

void getInput(int *input) {
    string inputString;
    getline(cin, inputString);
    istringstream iss(inputString);

    if (iss >> *input) {
        return;
    } else {
        cout << "Error input!" << "\t";
        getInput(input);     }
}
void getInput(double *input) {
    string inputString;
    getline(cin, inputString);
    istringstream iss(inputString);

    if (iss >> *input) {
          return;
    } else {

        cout << "Error input!" << "\t";
        getInput(input);
    }
}


void input_coordinates(int current,int amount_polygons,polygon *p_polygon)
 {

        double correct_y = 0;
        cout<<"\n"<<"Polygon number:"<<current<<"\n";
        cout<<"Enter coordinate x of the polygon vertex\t";
        getInput(&p_polygon[current-1].x1);
        cout<<"Enter coordinate y of the polygon vertex\t";
        getInput(&p_polygon[current-1].y1);
        //if ((p_polygon[current-1].x1<(-1)*E)||(p_polygon[current-1].x1>E)||(p_polygon[current-1].y1<(-1)*E)||(p_polygon[current-1].y1>E))
            //{cout<<"Error coordinate\n"; input_coordinates(current,amount_polygons,p_polygon);}
        double R = fabs(p_polygon[current-1].modul_side/(2*sin(M_PI/p_polygon[current-1].amount_angles)));
        if((sqrt(pow(p_polygon[current-1].x1,double(2))+pow(p_polygon[current-1].y1,double(2)))-R)<0)
        {cout<<"Error coordinate\n";
         correct_y = sqrt(pow(R,double(2))-pow(p_polygon[current-1].x1,double(2)));
         cout<<"With this x, the y must modulo more than\n"<<correct_y<<"\n";
         input_coordinates(current,amount_polygons,p_polygon);
        }
 }

void input(int current,int &amount_polygons,polygon *&p_polygon) {
  amount_polygons++;
  polygon *new_p_polygon = new polygon[amount_polygons];
  for(int i=0;i<amount_polygons-1;++i)
    {
      new_p_polygon[i]=p_polygon[i];
    }
  delete[] p_polygon;
  p_polygon=new_p_polygon;
  cout<<"Polygon  "<<current<<"\n";
  cout<<"Enter module of side\t";
   do{
  getInput(&p_polygon[current-1].modul_side);
  if(p_polygon[current-1].modul_side<=0)
    {
     cout<<"Module of the side cannot take such a value\t";
    }
  }
  while(p_polygon[current-1].modul_side<=0);
  cout<<"Enter amount of angles\t";
  do{
  getInput(&p_polygon[current-1].amount_angles);
  if(p_polygon[current-1].amount_angles<3)
    {
     cout<<"Amount of angles must be more than 2, Try again\t";
    }
  }
  while(p_polygon[current-1].amount_angles<3);
  input_coordinates(current,amount_polygons,p_polygon);
}

void output(int current,int amount_polygons,polygon *p_polygon)
{
  if(amount_polygons==0)
  {
    cout<<"Error output\n";
  }
  for(int i=0;i<amount_polygons;++i)
    {
      cout<<"\n"<<"Polygon:"<<i+1<<"\n";
      cout <<"Length of side="<<p_polygon[i].modul_side<<"\n";
      cout <<"Amount angles="<<p_polygon[i].amount_angles<<"\n";
      cout <<"Perimeter of polygon="<<p_polygon[i].P<<"\n";
      cout<<"Area of polygon="<<p_polygon[i].S<<"\n";
      double R,dxR,dyR,xR,yR,k;
      double modx1=fabs(p_polygon[i].x1);
      double mody1=fabs(p_polygon[i].y1);
      int flagX=1;
      int flagY=1;
      if(p_polygon[i].x1<0){flagX=-1;}
      if(p_polygon[i].y1<0){flagY=-1;}
      R = p_polygon[i].modul_side/(2*sin(M_PI/p_polygon[i].amount_angles));
      k=atan((mody1)/(modx1));
      dxR=R*cos(k);
      dyR=R*sin(k);
      xR=modx1-dxR;
      yR=mody1-dyR;
      double angle=2*M_PI/p_polygon[i].amount_angles;
      cout<<"Coordinates of polygon: "<<i+1<<"\n";
      cout<<"Vertex 1: "<<p_polygon[i].x1<<";"<<p_polygon[i].y1<<"\n";
      for(int j=1;j<p_polygon[i].amount_angles;++j)
      {
         if(flagX != flagY){
            double NewAngle=((atan(mody1/modx1))-(j)*angle);
            double Next_X=xR+R*cos(NewAngle);
            double Next_Y=yR+R*sin(NewAngle);
            cout<<"Vertex"<<j+1<<": " <<Next_X*flagX<<";"<<Next_Y*flagY<<"\n";
          }else{
            double NewAngle=atan(mody1/modx1)+(j)*angle;
            double Next_X=xR+R*cos(NewAngle);
            double Next_Y=yR+R*sin(NewAngle);
            cout<<"Vertex"<<j+1<<": " <<Next_X*flagX<<";"<<Next_Y*flagY<<"\n";
          }

        }
    }
}

void S (int amount_polygons,polygon* p_polygon){
    for(int i=0;i<amount_polygons;++i)
      {
        if(p_polygon[i].amount_angles==3)
        {
          p_polygon[i].S=sqrt(3)/4*pow(p_polygon[i].modul_side,2);
        }
        if(p_polygon[i].amount_angles==4)
        {
          p_polygon[i].S=pow(p_polygon[i].modul_side,2);
        }
        if(p_polygon[i].amount_angles>4)
        {
          p_polygon[i].S=p_polygon[i].amount_angles*pow(p_polygon[i].modul_side,2)/(4*tan(M_PI/p_polygon[i].amount_angles));
        }
      }
}
void P(int amount_polygons,polygon* p_polygon){
    for(int i =0; i<amount_polygons; i++){
        p_polygon[i].P = p_polygon[i].amount_angles*p_polygon[i].modul_side;
    }
}

void max_S_or_P(int amount_polygons,polygon *p_polygon,int b)
{
double maxP_S=0;
int amount_max=0;
int indm[amount_polygons];
double P_or_S[amount_polygons];
if(b==1)
{
    for(int i=0;i<amount_polygons;++i)
    {
      P_or_S[i]=p_polygon[i].P;
    }
}
if(b==0)
{
  for(int i=0;i<amount_polygons;++i)
    {
      P_or_S[i]=p_polygon[i].S;
    }
}
  for(int i=0;i<amount_polygons;++i)
    {
      if(P_or_S[i] > maxP_S)
      {
        maxP_S = P_or_S[i];
      }
    }
  for(int i=0;i<amount_polygons;++i)
    {
      if(P_or_S[i]==maxP_S)
      {
        indm[amount_max]=i;
        amount_max++;
      }
    }
  if((amount_max==1)&&(b==1))
  {
    cout<<"Max P = "<<maxP_S<<"\nINDEX -> "<<indm[0]+1<<"\n";
  }
  if((amount_max==1)&&(b==0))
  {
    cout<<"Max S= "<<maxP_S<<"\nINDEX -> "<<indm[0]+1<<"\n";
  }
  if((amount_max>1)&&(b==1))
  {
    cout<<"Max P = "<<maxP_S<<"\nINDEXES: ";
    for(int i=0;i<amount_max;++i)
      {
        cout<<indm[i]+1<<"\n";
      }
  }
  if((amount_max>1)&&(b==0))
  {
    cout<<"Max S = "<<maxP_S<<"\nINDEXES: ";
    for(int i=0;i<amount_max;++i)
      {
        cout<<indm[i]+1<<"\n";
      }
  }
}

void delete_polygon(int& amount_polygons, polygon*& p_polygon)
{
  int number_polygon;
  cout << "Enter number of polygon: ";
  cin >> number_polygon;
  getInput(&number_polygon);
  if (number_polygon < 1 || number_polygon > amount_polygons)
  {
    cout << "No polygon with this number\n";
    return;
  }

  polygon* new_p_polygon = new polygon[amount_polygons - 1];

  for (int i = 0; i < number_polygon - 1; ++i)
  {
    new_p_polygon[i] = p_polygon[i];
  }

  for (int i = number_polygon; i < amount_polygons; ++i)
  {
    new_p_polygon[i - 1] = p_polygon[i];
  }

  delete[] p_polygon;
  p_polygon = new_p_polygon;
  amount_polygons--;
}

void new_page()
{
  for(int i=0;i<100;++i)
    {
      cout<<"\n";
    }
}

void submenu(int amount_polygons,polygon *p_polygon)
{
  int exit_sub=0;
  while(exit_sub==0)
  {
  int choice_submenu;
  cout<<"1.Determine polygon with max square\n";
  cout<<"2.Determine polygon with max perimeter\n";
  cout<<"3.Return to previous menu\n";
  getInput(&choice_submenu);
  switch(choice_submenu)
    {
      case 1:
      new_page();
      max_S_or_P (amount_polygons,p_polygon,0);
      break;

      case 2:
      new_page();
      max_S_or_P(amount_polygons,p_polygon,1);
      break;

      case 3:
      new_page();
      exit_sub++;
      break;

      default:
      cout<<"Error of submenu\n";

    }
  }
}
void menu(int amount_polygons,polygon *p_polygon)
{
  int exit=0;
  int current=0;
  while(exit==0)
  {
  int choice;
  cout<<"MENU\n";
  cout<<"1.Input new polygon\n";
  cout<<"2.Output information about all polygons\n";
  cout<<"3.Delete polygon\n";
  cout<<"4.Submenu max square and max perimetr\n";
  cout<<"5.Exit\n";
  getInput(&choice);
  switch(choice)
    {

      case 1:
      new_page();
      current++;
      input(current,amount_polygons,p_polygon);
      S(amount_polygons,p_polygon);
      P(amount_polygons,p_polygon);
      break;

      case 2:
      new_page();
      output(current,amount_polygons,p_polygon);
      break;

      case 3:
      new_page();
      delete_polygon(amount_polygons,p_polygon);
      current--;
      break;

      case 4:
      new_page();
      submenu(amount_polygons,p_polygon);
      break;

      case 5:
      new_page();
      cout<<"Are you sure to exit? If yes press 1 if no press 2\n";
      int choice_exit;
      getInput(&choice_exit);
      if(choice_exit==1)
      {
        exit++;
      }
      if(choice_exit==2)
      {
        new_page();
        menu(amount_polygons,p_polygon);
      }
      break;
      default:
      cout<<"Error of menu\n";

    }
  }
}
int main(){
    int amount_polygons=0;
    polygon *p_polygon=NULL;
    menu(amount_polygons,p_polygon);
}

